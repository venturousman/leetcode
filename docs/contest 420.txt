package medium;

import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;

public class Contest420 {

	// Q1 - accepted
	public static List<String> stringSequence(String target) {
		List<String> results = new ArrayList<>();
		var chars = target.toCharArray();
		var s = new StringBuilder("a");
		results.add(s.toString());
		for (int i = 0; i < chars.length; i++) {
			var c = chars[i];
			if (i + 1 > s.length()) {
				// key 1
				s.append("a");
				results.add(s.toString());
			}

			// key 2
			var lastC = s.charAt(s.length() - 1);
			while (lastC != c) {
				lastC++;
				s.setCharAt(s.length() - 1, lastC);
				results.add(s.toString());
			}
		}
		return results;
	}

	// Q3
	public static int minOperations(int[] nums) {
		if (nums.length < 2)
			return 0;
		int count = 0;
		int idx = nums.length - 1;
		while (idx > 0) {
			if (nums[idx] < nums[idx - 1]) {
				int k = idx - 1;
				// greatest divisor
				int d = nums[k] / 2;
//				int min = k > 0 ? Math.max(0, nums[k - 1]) : 0;
//				while (d > 1 && (nums[k] % d != 0 || (nums[k] % d == 0 && nums[k] / d < min)))
//					d--;
				while (d > 1 && nums[k] % d != 0)
					d--;
				if (nums[k] % d == 0 && nums[k] / d <= nums[k + 1]) {
					count++;
					nums[k] = nums[k] / d;
				} else {
					return -1;
				}
			}
			idx--;
		}
		return count;
	}

	// Q2
	public static int numberOfSubstrings(String s, int k) {
		Map<Character, Integer> freq = new HashMap<>();
		var chars = s.toCharArray();
		int count = 0;
		for (int i = 0; i < chars.length; i++) {
//			if (i > 0) {
//				for (int j = 0; j < i; j++) {
//					var c1 = chars[j];
//					var f = freq.getOrDefault(c1, 0);
//					if (f > 0)
//						freq.put(c1, f - 1);
//				}
//			}

			var c = chars[i];
			freq.put(c, freq.getOrDefault(c, 0) + 1);

			for (Integer v : freq.values()) {
				if (v == k)
					count++;
			}
		}
		return count;
	}

	public static void main(String[] args) {
//		System.out.println(numberOfSubstrings("abacb", 2));
//		System.out.println(numberOfSubstrings("abcde", 1));
		System.out.println(numberOfSubstrings("hxccgfp", 1)); // expected 28

//		System.out.println(stringSequence("abc"));
//		System.out.println(stringSequence("he"));

//		System.out.println(minOperations(new int[] { 25, 27 }));
//		System.out.println(minOperations(new int[] { 25, 7 }));
//		System.out.println(minOperations(new int[] { 7, 7, 6 }));
//		System.out.println(minOperations(new int[] { 1, 1, 1, 1 }));
//		System.out.println(minOperations(new int[] { 3, 24, 11 }));
//		System.out.println(minOperations(new int[] { 9, 27, 81, 27, 3 })); // 4

//		System.out.println();

	}

}


https://leetcode.com/contest/weekly-contest-420/
https://leetcode.com/problems/find-the-sequence-of-strings-appeared-on-the-screen/description/
https://leetcode.com/problems/count-substrings-with-k-frequency-characters-i/description/
https://leetcode.com/problems/minimum-division-operations-to-make-array-non-decreasing/description/
https://leetcode.com/problems/check-if-dfs-strings-are-palindromes/description/